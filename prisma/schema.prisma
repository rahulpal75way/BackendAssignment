generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProviderType {
  google
  manual
  facebook
  apple
  linkedin
}

enum Role {
  ADMIN
  CANDIDATE
  USER
}

enum TransactionType {
  deposit
  withdrawal
  intl
  local
}

enum TransactionAction {
  deposit
  withdrawal
  transfer
}

enum TransactionStatus {
  pending
  approved
  rejected
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  name         String
  role         Role
  password     String
  provider     ProviderType? @default(manual)
  active       Boolean       @default(true)
  blocked      Boolean       @default(false)
  refreshToken String?

  jobs         Job[]         @relation("UserJobs")
  applications Application[]

  wallet       Wallet? // ✅ No fields/references here
  transactions Transaction[] @relation("UserTransactions")
  received     Transaction[] @relation("UserReceives")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wallet {
  id        String   @id @default(uuid())
  balance   Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User?   @relation(fields: [userId], references: [id]) // ✅ Only here
  userId String? @unique

  deposits    Transaction[] @relation("WalletDeposits")
  withdrawals Transaction[] @relation("WalletWithdrawals")
}

model Job {
  id           String        @id @default(uuid())
  title        String
  description  String
  postedBy     User          @relation("UserJobs", fields: [postedById], references: [id])
  postedById   String
  applications Application[]
  createdAt    DateTime      @default(now())

  @@index([title])
}

model Application {
  id        String   @id @default(uuid())
  job       Job      @relation(fields: [jobId], references: [id])
  jobId     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@index([jobId])
  @@index([userId])
}

model Transaction {
  id          String            @id @default(uuid())
  referenceId String?           @unique
  amount      Float
  type        TransactionType
  action      TransactionAction
  status      TransactionStatus
  createdAt   DateTime          @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation("UserTransactions", fields: [userId], references: [id])
  userId String

  receiver   User?   @relation("UserReceives", fields: [receiverId], references: [id])
  receiverId String?

  walletDeposit   Wallet? @relation("WalletDeposits", fields: [walletDepositId], references: [id])
  walletDepositId String?

  walletWithdrawal   Wallet? @relation("WalletWithdrawals", fields: [walletWithdrawalId], references: [id])
  walletWithdrawalId String?

  commission Commission?
}

model Commission {
  id        String            @id @default(uuid())
  txn       Transaction       @relation(fields: [txnId], references: [id])
  txnId     String            @unique
  amount    Float
  type      TransactionAction
  createdAt DateTime          @default(now())
  updatedAt DateTime @updatedAt
}
